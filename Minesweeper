import java.util.ArrayList;
import java.util.Arrays;
import tester.*;
import javalib.impworld.*;
import java.awt.Color;
import javalib.worldimages.*;
import java.util.Random;

// to represent a cell of the minesweeper game
class Cell  {
  int value; // the value of the cell
  boolean isMine; // indicates if there is a mine in the cell
  ArrayList<Cell> neighbors; // the neighbors of the cell
  boolean isFlag; // indicates if the cell is flagged
  boolean isClicked; // indicates if the cell is clicked

  // constructor with just indication of a mine
  Cell(boolean isMine) {
    this.isMine = isMine;
    this.neighbors = new ArrayList<Cell>();
  }

  // empty cell constructor
  Cell() {
    this.isMine = false;
    this.neighbors = new ArrayList<Cell>();
    this.isClicked = false;
  }

  // returns a count of the number of mines around this cell, and changes the value
  // of the cell to that count
  void countMineNeighbors() {
    int result = 0;
    for (int count = 0; count < this.neighbors.size(); count++) {
      if (this.neighbors.get(count).isMine) {
        result = result + 1;
      }
    }
    this.value = result;
  }

  // Changes this cells indication of being a mine to true
  void isMineNow() {
    this.isMine = true;
  }

  // Changes this cells indication of being flagged to true
  void isFlaggedNow() {
    this.isFlag = true;
  }

  // Changes this cells indication of being clicked to true
  void isClickedNow() {
    this.isClicked = true;
  }

  // returns a world image of the cell, depending on if it is clicked, if it is a mine,
  // if it is flagged, if it has a value, or if it has a value of zero
  WorldImage drawAt(int col, int row) {
    if (this.isClicked) {

      if (this.isMine) {
        return new OverlayImage(
            new CircleImage( col / 2, OutlineMode.SOLID, Color.black),
            new RectangleImage(col, row,
                OutlineMode.OUTLINE, Color.black));
      }
      else if (this.value != 0) {
        return new OverlayImage(
            new TextImage(Integer.toString(this.value), (row * 3) / 4, Color.black),
            new RectangleImage(col, row,
                OutlineMode.OUTLINE, Color.black));
      }

      else {
        return new RectangleImage(col, row,
            OutlineMode.SOLID, Color.BLACK);
      }
    }

    else {
      if (this.isFlag) {
        return new OverlayImage(
            new EquilateralTriangleImage(col / 2, OutlineMode.SOLID, Color.YELLOW),
            new RectangleImage(col, row, OutlineMode.OUTLINE, Color.BLACK));
      }
    }

    return new RectangleImage(col, row,
        OutlineMode.OUTLINE, Color.black);
  }

  // Adds the given cell to this cell's neighbors, and this cell to the given cell's neighbors
  void addNeighbors(Cell other) {
    this.neighbors.add(other);
    other.neighbors.add(this);
  }

  // creates a recursive flood effect of cells by checking if this cell's neighbors
  // are not clicked, are not mines, and have values of 0, and floods if so
  public void flood() {
    for (int i = 0; i < this.neighbors.size(); i++ ) {
      if (!this.neighbors.get(i).isClicked && !this.neighbors.get(i).isMine && this.value == 0) {
        this.neighbors.get(i).isClickedNow();
        this.neighbors.get(i).flood();
      } 
    }
  }
}

// represents a Game Board for the minesweeper game
class GameBoard {
  int numRows; // the number of rows in the game board
  int numCols; // the number of columns in the game board
  int numMines; // the number of mines in the game board
  ArrayList<ArrayList<Cell>> cells; // the 2d array of cells in the game board
  Random random; // the random number generator for the game board

  //constructor for the gameboard in its initial state
  GameBoard(int numRows, int numCols, int numMines) {
    this.numRows = numRows;
    this.numCols = numCols;
    this.numMines = numMines;
    this.cells = new ArrayList<ArrayList<Cell>>();
    this.random = new Random();
    this.createCells();
    this.assignNeighbors();
    this.createRandomMines();
    this.assignCellValues();
  }

  //constructor for when the game is played
  GameBoard(int numRows, int numCols, int numMines, int randomSeedValueForTesting) {
    this.numRows = numRows;
    this.numCols = numCols;
    this.numMines = numMines;
    this.cells = new ArrayList<ArrayList<Cell>>();
    this.random = new Random(randomSeedValueForTesting);
  }

  //constructor for testing
  GameBoard(ArrayList<ArrayList<Cell>> cells, int numRows, int numCols, int numMines) {
    this.cells = cells;
    this.numRows = numRows;
    this.numCols = numCols;
    this.numMines = numMines;
  }

  // changes the cells of the GameBoard to a new 2d array based on the number of rows and columns
  public void createCells() {
    for (int rowCount = 0; rowCount < this.numRows; rowCount++) {
      ArrayList<Cell> currRow = new ArrayList<Cell>();
      for (int colCount = 0; colCount < this.numCols; colCount++) {
        currRow.add(new Cell());
      }
      this.cells.add(currRow);
    }
  }

  // assigns the neighbors for each of the cells in the game
  public void assignNeighbors() {
    for (int i = 0; i < this.numRows; i++) {
      for (int j = 0; j < this.numCols; j++) {
        if (!(i == this.numRows - 1  && j == this.numCols - 1)) {
          if (i == this.numRows - 1) {
            this.cells.get(i).get(j).addNeighbors(this.cells.get(i).get(j + 1));

          }

          else if (j == 0) {
            this.cells.get(i).get(j).addNeighbors(this.cells.get(i).get(j + 1));
            this.cells.get(i).get(j).addNeighbors(this.cells.get(i + 1).get(j));
            this.cells.get(i).get(j).addNeighbors(this.cells.get(i + 1).get(j + 1));

          }

          else if (j == this.numCols - 1) {
            this.cells.get(i).get(j).addNeighbors(this.cells.get(i + 1).get(j));
            this.cells.get(i).get(j).addNeighbors(this.cells.get(i + 1).get(j - 1));

          }

          else {
            this.cells.get(i).get(j).addNeighbors(this.cells.get(i).get(j + 1));
            this.cells.get(i).get(j).addNeighbors(this.cells.get(i + 1).get(j - 1));
            this.cells.get(i).get(j).addNeighbors(this.cells.get(i + 1).get(j));
            this.cells.get(i).get(j).addNeighbors(this.cells.get(i + 1).get(j + 1));

          }
        }
      }
    }
  }

  // creates random mines and sets them throughout the grid, without duplicate cells/mines
  public void createRandomMines() {
    int numCreatedMines = this.numMines;

    while (numCreatedMines > 0) {
      int a = this.random.nextInt(this.numRows);
      int b = this.random.nextInt(this.numCols);
      if (!this.cells.get(a).get(b).isMine) {
        this.cells.get(a).get(b).isMineNow();
        numCreatedMines--;
      }
    } 
  }

  // assigns the value for each cell in the Minesweeper GameBoard
  public void assignCellValues() {
    for (int a = 0; a < this.numRows; a++) {
      for (int b = 0; b < this.numCols; b++) {
        this.cells.get(a).get(b).countMineNeighbors();
      }
    }
  }

  // constructs the scene of the minesweeper game for the start of the game
  public WorldScene drawAllCells(int x, int y, WorldScene background) {
    for (int i = 0; i < this.numRows; i++) {
      for (int j = 0; j < this.numCols; j++) {
        background.placeImageXY(this.cells.get(i).get(j).drawAt(x, y),
            x / 2 + (i * x), y / 2 + (j * y));
      }      
    }
    return background;
  }

  // draws the cells of the gameboard for when the game is finished, with everything revealed
  public WorldScene drawRevealedMines(int x, int y, WorldScene background) {
    for (int i = 0; i < this.numRows; i++) {
      for (int j = 0; j < this.numCols; j++) {
        if (!this.cells.get(i).get(j).isMine || this.cells.get(i).get(j).isFlag) {
          this.cells.get(i).get(j).value = 0;
          this.cells.get(i).get(j).isClicked = false;
          this.cells.get(i).get(j).isFlag = false;
          background.placeImageXY(this.cells.get(i).get(j).drawAt(x, y),
              x / 2 + (i * x), y / 2 + (j * y));
        }
        this.cells.get(i).get(j).isClickedNow();
        background.placeImageXY(this.cells.get(i).get(j).drawAt(x, y),
            x / 2 + (i * x), y / 2 + (j * y));
      }
    }
    return background;
  }

  // sets the cell that matches in the gameboard, using the given x value, y value, and position,
  // to be a clicked cell, and creates the flood effect if the cell's value is zero
  public void clickedCell(int x, int y, Posn pos) {
    this.cells.get(pos.x / x).get(pos.y / y).isClickedNow();

    if (this.cells.get(pos.x / x).get(pos.y / y).value == 0) {
      this.cells.get(pos.x / x).get(pos.y / y).flood();
    }
  }

  // sets the desired cell on the gameboard, using the given position, x, and y values
  // to be a flagged cell
  public void makeFlaggedCell(Posn pos, int x, int y) {
    this.cells.get(pos.x / x).get(pos.y / y).isFlaggedNow();
  }

  // returns true if the cell on the gameboard, using the position, x, and y values, is a mine
  public boolean isMineClicked(Posn pos, int x, int y) {
    return this.cells.get(pos.x / x).get(pos.y / y).isMine;
  }

  // returns a count of cells that have not been clicked yet in the gameboard
  public int countNonClickedCells() {
    int count = 0;
    for (int i = 0; i < this.numRows; i++) {
      for (int j = 0; j < this.numCols; j++) {
        if (this.cells.get(i).get(j).isMine || !this.cells.get(i).get(j).isClicked) {
          count++;
        }
      }
    }
    return count;
  }
}

//to represent a minesweeper game
class Minesweeper extends World {
  int numMinesRemaining; // the number of mines remaining in the game
  GameBoard gameBoard; // the game board of the minesweeper game
  boolean isMineClicked; // indicates if a mine has been clicked in the game or not
  static final int GAME_WIDTH = 600; // the actual width of the minesweeper game
  static final int GAME_HEIGHT = 600; // the actual height of the minesweeper game

  // constructor for the minesweeper game
  Minesweeper(int numMinesRemaining, int cellsLong, int cellsHigh) {
    this.numMinesRemaining = numMinesRemaining;
    this.gameBoard = new GameBoard(cellsLong, cellsHigh, this.numMinesRemaining);
    this.isMineClicked = false;
    if (this.numMinesRemaining > (cellsLong * cellsHigh) || this.numMinesRemaining < 0) {
      throw new IllegalArgumentException(
          "Cannot create more mines than there are grids and/or a negative number of mines");
    }
  }

  // changes the minesweeper game depending on if the left or right mouse button is clicked
  public void onMouseClicked(Posn pos, String str) {
    int xPlacement = Minesweeper.GAME_HEIGHT / this.gameBoard.numRows;
    int yPlacement = Minesweeper.GAME_WIDTH / this.gameBoard.numCols;

    if (str.equals("LeftButton")) {
      if (this.gameBoard.isMineClicked(pos, xPlacement, yPlacement)) {
        this.isMineClicked = true;
      }
      this.gameBoard.clickedCell(xPlacement, yPlacement, pos);
    }

    else if (str.equals("RightButton")) {
      this.gameBoard.makeFlaggedCell(pos, xPlacement, yPlacement);
    } 
  }


  // constructs the scene of the minesweeper game
  public WorldScene makeScene() {
    WorldScene scene = this.getEmptyScene();
    int xPlacement = Minesweeper.GAME_HEIGHT / this.gameBoard.numRows;
    int yPlacement = Minesweeper.GAME_WIDTH / this.gameBoard.numCols;

    scene.placeImageXY(
        new RectangleImage(Minesweeper.GAME_WIDTH, Minesweeper.GAME_HEIGHT,
            OutlineMode.SOLID, Color.cyan),
        Minesweeper.GAME_WIDTH / 2, Minesweeper.GAME_HEIGHT / 2);

    scene = this.gameBoard.drawAllCells(xPlacement, yPlacement, scene);

    return scene;
  }

  // returns a world ending depending on if a mine has been clicked, if every cell besides
  // the mines have been clicked, or if the world should not end yet
  public WorldEnd worldEnds() {
    if (this.isMineClicked) {
      return new WorldEnd(true, this.gameOver());
    }
    else if (this.gameBoard.countNonClickedCells() == this.numMinesRemaining) {
      return new WorldEnd(true, this.gameWin());
    }
    else {
      return new WorldEnd(false, this.makeScene());
    }
  }

  // returns a scene of the game showing the locations of all of the mines and indicating that the
  // game is over and failed
  public WorldScene gameOver() {
    int xPlacement = Minesweeper.GAME_HEIGHT / this.gameBoard.numRows;
    int yPlacement = Minesweeper.GAME_WIDTH / this.gameBoard.numCols;
    WorldScene scene = this.gameBoard.drawRevealedMines(xPlacement, yPlacement,
        this.getEmptyScene());

    scene.placeImageXY(new TextImage("GAME OVER", Color.RED),
        Minesweeper.GAME_WIDTH / 2, Minesweeper.GAME_HEIGHT / 2);

    return scene;
  }

  // returns a scene of the minesweeper game showing all of the cells and indicating that the
  // game has ended and the player has won
  public WorldScene gameWin() {
    int xPlacement = Minesweeper.GAME_HEIGHT / this.gameBoard.numRows;
    int yPlacement = Minesweeper.GAME_WIDTH / this.gameBoard.numCols;
    WorldScene scene = this.gameBoard.drawAllCells(xPlacement, yPlacement, this.getEmptyScene());

    scene.placeImageXY(new TextImage("YOU WIN!", Color.GREEN),
        Minesweeper.GAME_WIDTH / 2, Minesweeper.GAME_HEIGHT / 2);

    return scene;
  }
}

// Class to test the BigBang -- to run the game
// The values in the constructors are the number of mines, and
// the number of columns then rows respectively 
class ExampleMineSweeper {
  void testGame(Tester t) { 
    Minesweeper game = new Minesweeper(15, 10, 10);
    game.bigBang(600, 600, .01);
  }
}

// Examples to test for methods
class ExamplesGame {

  Random r;

  Cell cell1;
  Cell cell2;
  Cell cell3;
  Cell cell4;
  Cell cell5;
  Cell cell6;
  Cell cell7;
  Cell cell8;
  Cell cell9;

  ArrayList<Cell> alCell1;
  ArrayList<Cell> alCell2;
  ArrayList<Cell> alCell3;


  GameBoard gb;

  Minesweeper ms;


  WorldImage cellWithMine = new OverlayImage(new CircleImage(25, OutlineMode.SOLID, Color.BLACK),
      new RectangleImage(50, 50 , OutlineMode.OUTLINE, Color.BLACK));

  WorldImage cellWithNumber = new OverlayImage(new TextImage(Integer.toString(1), 37.0,
      FontStyle.REGULAR, Color.BLACK),
      new RectangleImage(50, 50, OutlineMode.OUTLINE, Color.BLACK));

  WorldImage cellWithNothing = new RectangleImage(50, 50, OutlineMode.OUTLINE,Color.BLACK);

  WorldImage cellClickedVal0 = new RectangleImage(50, 50, OutlineMode.SOLID, Color.BLACK);

  WorldImage cellWithFlag = new OverlayImage(
      new EquilateralTriangleImage(25, OutlineMode.SOLID, Color.YELLOW),
      new RectangleImage(50, 50, OutlineMode.OUTLINE, Color.BLACK)); 

  Posn p1 = new Posn(1, 1);
  Posn p2 = new Posn(0, 0);
  Posn p3 = new Posn(300, 300);


  void initData() {
    this.cell1 = new Cell(false);
    this.cell2 = new Cell(false);
    this.cell3 = new Cell(false);
    this.cell4 = new Cell(false);
    this.cell5 = new Cell(false);
    this.cell6 = new Cell(false);
    this.cell7 = new Cell(false);
    this.cell8 = new Cell(false);
    this.cell9 = new Cell(false);

    this.alCell1 = new ArrayList<Cell>(Arrays.asList(this.cell1, this.cell2, this.cell3));
    this.alCell2 = new ArrayList<Cell>(Arrays.asList(this.cell4, this.cell5, this.cell6));
    this.alCell3 = new ArrayList<Cell>(Arrays.asList(this.cell7, this.cell8, this.cell9));

    this.gb = new GameBoard(new ArrayList<ArrayList<Cell>>(), 2, 2, 2);

    this.ms = new Minesweeper(0,1,1);
  }

  void testMinesweeperConstructor(Tester t) {
    this.initData();
    // RUNNING THE TEST BELOW BREAKS THE TESTING SYSTEM, NOT SHOWING IF ANY OF THE TESTS PASSED
    // SO IT HAS BEEN COMMENTED OUT
    // t.checkConstructorException(new IllegalArgumentException(
    //     "Cannot create more mines than there are grids and/or a negative number of mines"),
    //    "Minesweeper", 50, 1, 1);
    t.checkConstructorException(new IllegalArgumentException(
        "Cannot create more mines than there are grids and/or a negative number of mines"),
        "Minesweeper", -5, 2, 2);

  }

  void testIsMineNow(Tester t) {
    this.initData();

    this.cell1.isMineNow();
    this.cell2.isMineNow();

    t.checkExpect(this.cell1.isMine, true);
    t.checkExpect(this.cell2.isMine, true);
    t.checkExpect(this.cell3.isMine, false);

  }

  void testIsFlaggedNow(Tester t) {
    this.initData();
    this.cell1.isFlaggedNow();
    this.cell2.isFlaggedNow();

    t.checkExpect(this.cell1.isFlag, true);
    t.checkExpect(this.cell2.isFlag, true);
    t.checkExpect(this.cell3.isFlag, false);


  }

  void testIsClickedNow(Tester t) {
    this.initData();
    this.cell1.isClickedNow();
    this.cell2.isClickedNow();

    t.checkExpect(this.cell1.isClicked, true);
    t.checkExpect(this.cell2.isClicked, true);
    t.checkExpect(this.cell3.isClicked, false);

  } 

  void testDrawAt(Tester t) {
    this.initData();
    t.checkExpect(this.cell3.drawAt(50, 50), this.cellWithNothing);
    this.cell6.isClickedNow();
    this.cell6.isMineNow();
    t.checkExpect(this.cell6.drawAt(50, 50), this.cellWithMine);
    this.cell4.isClickedNow();
    this.cell4.value = 1;
    t.checkExpect(this.cell4.drawAt(50, 50), this.cellWithNumber);
    this.cell3.isClickedNow();
    t.checkExpect(this.cell3.drawAt(50, 50), this.cellClickedVal0);
    this.cell5.isFlaggedNow();
    t.checkExpect(this.cell5.drawAt(50, 50), this.cellWithFlag);

  }

  void testAddNeighbors(Tester t) {
    this.initData();
    
    t.checkExpect(this.cell1.neighbors.contains(this.cell2), false);
    t.checkExpect(this.cell2.neighbors.contains(this.cell1), false);
    t.checkExpect(this.cell3.neighbors.contains(this.cell4), false);
    t.checkExpect(this.cell4.neighbors.contains(this.cell3), false);

    this.cell1.addNeighbors(this.cell2);
    this.cell3.addNeighbors(this.cell4);

    t.checkExpect(this.cell1.neighbors.contains(this.cell2), true);
    t.checkExpect(this.cell2.neighbors.contains(this.cell1), true);
    t.checkExpect(this.cell3.neighbors.contains(this.cell4), true);
    t.checkExpect(this.cell4.neighbors.contains(this.cell3), true);

  }

  void testCountMineNeighbors(Tester t) {
    this.initData();

    this.cell4.isMineNow();
    this.cell1.neighbors = this.alCell2;
    this.cell1.countMineNeighbors();
    t.checkExpect(this.cell1.value, 1);
    this.cell5.isMineNow();
    this.cell1.countMineNeighbors();
    t.checkExpect(this.cell1.value, 2);
  }

  void testFlood(Tester t) {
    this.initData();

    this.cell1.neighbors = this.alCell2;
    this.cell1.flood();
    t.checkExpect(this.cell4.isClicked, true);
    t.checkExpect(this.cell5.isClicked, true);
    t.checkExpect(this.cell6.isClicked, true);
    t.checkExpect(this.cell2.isClicked, false);

    this.initData();

    this.cell1.neighbors = this.alCell2;
    this.cell4.neighbors = this.alCell3;
    this.cell1.flood();
    t.checkExpect(this.cell4.isClicked, true);
    t.checkExpect(this.cell5.isClicked, true);
    t.checkExpect(this.cell6.isClicked, true);
    t.checkExpect(this.cell7.isClicked, true);
    t.checkExpect(this.cell8.isClicked, true);
    t.checkExpect(this.cell9.isClicked, true);
    t.checkExpect(this.cell2.isClicked, false);

  }

  void testCreateCells(Tester t) {
    this.initData();
    this.gb.createCells();

    t.checkExpect(this.gb.cells.get(0).get(0), this.cell1);
    t.checkExpect(this.gb.cells.get(1).get(0), this.cell1);
    t.checkExpect(this.gb.cells.get(1).get(1), this.cell1);
    t.checkExpect(this.gb.cells.get(0).get(1), this.cell1);
  }

  void testAssignNeighbors(Tester t) {
    this.initData();
    this.gb = new GameBoard(2, 2, 2, 5);
    this.gb.createCells();
    this.gb.assignNeighbors();

    t.checkExpect(this.gb.cells.get(0).get(0).neighbors, new ArrayList<Cell>(Arrays.asList(
        this.gb.cells.get(0).get(1), this.gb.cells.get(1).get(0), this.gb.cells.get(1).get(1))));
    t.checkExpect(this.gb.cells.get(0).get(1).neighbors, new ArrayList<Cell>(Arrays.asList(
        this.gb.cells.get(0).get(0), this.gb.cells.get(1).get(0), this.gb.cells.get(1).get(1))));
    t.checkExpect(this.gb.cells.get(1).get(0).neighbors, new ArrayList<Cell>(Arrays.asList(
        this.gb.cells.get(0).get(1), this.gb.cells.get(0).get(0), this.gb.cells.get(1).get(1))));
    t.checkExpect(this.gb.cells.get(1).get(1).neighbors, new ArrayList<Cell>(Arrays.asList(
        this.gb.cells.get(0).get(0), this.gb.cells.get(0).get(1), this.gb.cells.get(1).get(0))));

  }

  void testCreateRandomMines(Tester t) {
    this.gb = new GameBoard(2, 2, 2, 5);
    this.gb.createCells();
    this.gb.assignNeighbors();
    this.gb.createRandomMines();  

    t.checkExpect(this.gb.cells.get(0).get(0).isMine, false);
    t.checkExpect(this.gb.cells.get(0).get(1).isMine, true);
    t.checkExpect(this.gb.cells.get(1).get(0).isMine, true);
    t.checkExpect(this.gb.cells.get(1).get(1).isMine, false);
  }

  void testAssignCellValues(Tester t) {
    this.initData();
    this.gb = new GameBoard(2, 2, 2, 5);
    this.gb.createCells();
    this.gb.assignNeighbors();
    this.gb.createRandomMines();
    this.gb.assignCellValues();

    t.checkExpect(this.gb.cells.get(0).get(0).value, 2);
    t.checkExpect(this.gb.cells.get(0).get(1).value, 1);
    t.checkExpect(this.gb.cells.get(1).get(0).value, 1);
    t.checkExpect(this.gb.cells.get(1).get(1).value, 2);
  }

  void testDrawAllCells(Tester t) {
    this.initData();
    this.gb = new GameBoard(1, 1, 0, 1);
    this.gb.createCells();
    this.gb.assignNeighbors();
    this.gb.createRandomMines();
    this.gb.assignCellValues();

    WorldScene s = new WorldScene(100,100);
    s.placeImageXY(new RectangleImage(2,2,OutlineMode.OUTLINE,Color.BLACK), 1, 1);


    t.checkExpect(this.gb.drawAllCells(2, 2, new WorldScene(100, 100)), s);

    this.initData();
    this.gb.createCells();

    WorldScene s2 = new WorldScene(600, 600);
    s2.placeImageXY(new RectangleImage(10, 10, OutlineMode.OUTLINE, Color.BLACK), 5, 5);
    s2.placeImageXY(new RectangleImage(10, 10, OutlineMode.OUTLINE, Color.BLACK), 15, 5);
    s2.placeImageXY(new RectangleImage(10, 10, OutlineMode.OUTLINE, Color.BLACK), 5, 15);
    s2.placeImageXY(new RectangleImage(10, 10, OutlineMode.OUTLINE, Color.BLACK), 15, 15);
    t.checkExpect(this.gb.drawAllCells(10, 10, new WorldScene(600, 600)), s2);

  }

  void testDrawRevealedMines(Tester t) {
    this.initData();
    this.gb.createCells();

    WorldScene s = new WorldScene(600, 600);
    s.placeImageXY(new RectangleImage(10, 10, OutlineMode.OUTLINE, Color.BLACK), 5, 5);
    s.placeImageXY(new RectangleImage(10, 10, OutlineMode.SOLID, Color.BLACK), 5, 5);
    s.placeImageXY(new RectangleImage(10, 10, OutlineMode.OUTLINE, Color.BLACK), 5, 15);
    s.placeImageXY(new RectangleImage(10, 10, OutlineMode.SOLID, Color.BLACK), 5, 15);
    s.placeImageXY(new RectangleImage(10, 10, OutlineMode.OUTLINE, Color.BLACK), 15, 5);
    s.placeImageXY(new RectangleImage(10, 10, OutlineMode.SOLID, Color.BLACK), 15, 5);
    s.placeImageXY(new RectangleImage(10, 10, OutlineMode.OUTLINE, Color.BLACK), 15, 15);
    s.placeImageXY(new RectangleImage(10, 10, OutlineMode.SOLID, Color.BLACK), 15, 15);

    t.checkExpect(this.gb.drawRevealedMines(10, 10, new WorldScene(600, 600)), s);
    t.checkExpect(this.gb.cells.get(0).get(0).value, 0);
    t.checkExpect(this.gb.cells.get(0).get(0).isFlag, false);
    t.checkExpect(this.gb.cells.get(0).get(0).isClicked, true);

    this.initData();
    this.gb.createCells();
    this.gb.cells.get(0).get(0).isFlag = true;

    WorldScene s2 = new WorldScene(600, 600);
    s2.placeImageXY(new RectangleImage(10, 10, OutlineMode.OUTLINE, Color.BLACK), 5, 5);
    s2.placeImageXY(new RectangleImage(10, 10, OutlineMode.SOLID, Color.BLACK), 5, 5);
    s2.placeImageXY(new RectangleImage(10, 10, OutlineMode.OUTLINE, Color.BLACK), 5, 15);
    s2.placeImageXY(new RectangleImage(10, 10, OutlineMode.SOLID, Color.BLACK), 5, 15);
    s2.placeImageXY(new RectangleImage(10, 10, OutlineMode.OUTLINE, Color.BLACK), 15, 5);
    s2.placeImageXY(new RectangleImage(10, 10, OutlineMode.SOLID, Color.BLACK), 15, 5);
    s2.placeImageXY(new RectangleImage(10, 10, OutlineMode.OUTLINE, Color.BLACK), 15, 15);
    s2.placeImageXY(new RectangleImage(10, 10, OutlineMode.SOLID, Color.BLACK), 15, 15);

    t.checkExpect(this.gb.drawRevealedMines(10, 10, new WorldScene(600, 600)), s2);

    this.initData();
    this.gb.createCells();
    this.gb.cells.get(0).get(0).isMine = true;

    WorldScene s3 = new WorldScene(600, 600);
    s3.placeImageXY(new OverlayImage(new CircleImage(5, OutlineMode.SOLID, Color.BLACK),
        new RectangleImage(10, 10 , OutlineMode.OUTLINE, Color.BLACK)), 5, 5);
    s3.placeImageXY(new RectangleImage(10, 10, OutlineMode.OUTLINE, Color.BLACK), 5, 15);
    s3.placeImageXY(new RectangleImage(10, 10, OutlineMode.SOLID, Color.BLACK), 5, 15);
    s3.placeImageXY(new RectangleImage(10, 10, OutlineMode.OUTLINE, Color.BLACK), 15, 5);
    s3.placeImageXY(new RectangleImage(10, 10, OutlineMode.SOLID, Color.BLACK), 15, 5);
    s3.placeImageXY(new RectangleImage(10, 10, OutlineMode.OUTLINE, Color.BLACK), 15, 15);
    s3.placeImageXY(new RectangleImage(10, 10, OutlineMode.SOLID, Color.BLACK), 15, 15);

    t.checkExpect(this.gb.drawRevealedMines(10, 10, new WorldScene(600, 600)), s3);

  }

  void testClickedCell(Tester t) {
    this.initData(); 
    this.gb.createCells();   
    this.gb.cells.get(1).get(1).neighbors = this.alCell2;

    this.gb.clickedCell(1, 1, this.p1); 
    // to check that the cell wanting to be clicked is now clicked
    t.checkExpect(this.gb.cells.get(1).get(1).isClicked, true);
    // to check that the flood effect has occurred
    t.checkExpect(this.cell4.isClicked, true);
    t.checkExpect(this.cell5.isClicked, true);
    t.checkExpect(this.cell6.isClicked, true);
    t.checkExpect(this.cell2.isClicked, false);   
    // to check none of the other cells have been clicked
    t.checkExpect(this.gb.cells.get(0).get(0).isClicked, false);
    t.checkExpect(this.gb.cells.get(0).get(1).isClicked, false);
    t.checkExpect(this.gb.cells.get(1).get(0).isClicked, false);

    this.initData(); 
    this.gb.createCells();   
    this.gb.cells.get(0).get(0).neighbors = this.alCell1;

    this.gb.clickedCell(1, 1, this.p2); 
    // to check that the cell wanting to be clicked is now clicked
    t.checkExpect(this.gb.cells.get(0).get(0).isClicked, true);
    // to check that the flood effect has occurred
    t.checkExpect(this.cell1.isClicked, true);
    t.checkExpect(this.cell2.isClicked, true);
    t.checkExpect(this.cell3.isClicked, true);
    t.checkExpect(this.cell4.isClicked, false);   
    // to check none of the other cells have been clicked
    t.checkExpect(this.gb.cells.get(1).get(0).isClicked, false);
    t.checkExpect(this.gb.cells.get(0).get(1).isClicked, false);
    t.checkExpect(this.gb.cells.get(1).get(1).isClicked, false);   

  }


  void testMakeFlaggedCell(Tester t) {
    this.initData();
    this.gb.createCells();
    this.gb.makeFlaggedCell(this.p1, 1, 1);   
    t.checkExpect(this.gb.cells.get(1).get(1).isFlag, true);
    t.checkExpect(this.gb.cells.get(1).get(0).isFlag, false);
    t.checkExpect(this.gb.cells.get(0).get(1).isFlag, false);
    t.checkExpect(this.gb.cells.get(0).get(0).isFlag, false);

    this.initData();
    this.gb.createCells();
    this.gb.makeFlaggedCell(this.p2, 1, 1);    
    t.checkExpect(this.gb.cells.get(0).get(0).isFlag, true);
    t.checkExpect(this.gb.cells.get(1).get(0).isFlag, false);
    t.checkExpect(this.gb.cells.get(0).get(1).isFlag, false);
    t.checkExpect(this.gb.cells.get(1).get(1).isFlag, false);

  }

  void testIsMineClicked(Tester t) {
    this.initData();
    this.gb.createCells();
    this.gb.cells.get(0).get(0).isMineNow();
    t.checkExpect(this.gb.isMineClicked(this.p2, 1, 1), true);
    t.checkExpect(this.gb.isMineClicked(this.p1, 1, 1), false);

    this.initData();
    this.gb.createCells();
    this.gb.cells.get(1).get(1).isMineNow();
    t.checkExpect(this.gb.isMineClicked(this.p2, 1, 1), false);
    t.checkExpect(this.gb.isMineClicked(this.p1, 1, 1), true);

  }

  void testCountNonClickedCells(Tester t) {
    this.initData();
    this.gb.createCells();
    t.checkExpect(this.gb.countNonClickedCells(), 4);

    this.gb = new GameBoard(2, 2, 2, 3);
    this.gb.createCells();
    this.gb.assignNeighbors();
    this.gb.createRandomMines();  

    t.checkExpect(this.gb.countNonClickedCells(), 4);

    this.gb.cells.get(0).get(0).isClickedNow();

    t.checkExpect(this.gb.countNonClickedCells(), 3);

  }

  void testOnMouseClicked(Tester t) {
    this.initData();
    this.ms = new Minesweeper(1, 2, 2);

    this.ms.onMouseClicked(this.p1, "randomString");
    t.checkExpect(this.ms.numMinesRemaining, 1);
    t.checkExpect(this.ms.gameBoard.numCols, 2);
    t.checkExpect(this.ms.gameBoard.numRows, 2);
    t.checkExpect(this.ms.isMineClicked, false);

    this.initData();
    this.ms = new Minesweeper(0, 2, 2);
    this.ms.gameBoard.cells.get(1).get(1).isMine = false;

    this.ms.onMouseClicked(this.p3, "LeftButton");
    t.checkExpect(this.ms.gameBoard.cells.get(1).get(1).isClicked, true);
    t.checkExpect(this.ms.gameBoard.cells.get(1).get(1).isMine, false);

    this.initData();
    this.ms = new Minesweeper(0, 2, 2);
    this.ms.gameBoard.cells.get(1).get(1).isMineNow();

    this.ms.onMouseClicked(this.p3, "LeftButton");
    t.checkExpect(this.ms.gameBoard.cells.get(1).get(1).isClicked, true);
    t.checkExpect(this.ms.gameBoard.cells.get(1).get(1).isMine, true);
    t.checkExpect(this.ms.isMineClicked, true);

    this.initData();
    this.ms = new Minesweeper(0, 2, 2);
    this.ms.onMouseClicked(this.p3, "RightButton");
    t.checkExpect(this.ms.gameBoard.cells.get(1).get(1).isFlag, true);


  }

  void testMakeScene(Tester t) {
    this.initData(); 

    WorldScene s = new WorldScene(0,0);
    s.placeImageXY(new RectangleImage(0,0,OutlineMode.OUTLINE, Color.BLACK), 0, 0);
    s.placeImageXY(new RectangleImage(1,1,OutlineMode.SOLID,Color.cyan),0, 0);
    s.placeImageXY(new RectangleImage(1,1,OutlineMode.OUTLINE,Color.BLACK), 1, 1);

    t.checkExpect(this.ms.makeScene(), s); 

    this.initData();

    this.gb.createCells();

    this.ms.gameBoard = this.gb;
    WorldScene scene = ms.getEmptyScene();

    scene.placeImageXY(
        new RectangleImage(600, 600, OutlineMode.SOLID, Color.cyan), 300, 300);   
    scene.placeImageXY(new RectangleImage(10, 10, OutlineMode.OUTLINE, Color.BLACK), 5, 5);
    scene.placeImageXY(new RectangleImage(10, 10, OutlineMode.OUTLINE, Color.BLACK), 15, 5);
    scene.placeImageXY(new RectangleImage(10, 10, OutlineMode.OUTLINE, Color.BLACK), 5, 15);
    scene.placeImageXY(new RectangleImage(10, 10, OutlineMode.OUTLINE, Color.BLACK), 15, 15);

    t.checkExpect(this.ms.makeScene(), scene);

  }  

  void testGameOver(Tester t) {
    this.initData();
    this.gb.createCells();
    this.ms.gameBoard = this.gb;

    WorldScene s = this.gb.drawRevealedMines(300, 300, this.ms.getEmptyScene());
    s.placeImageXY(new TextImage("GAME OVER", Color.RED), 300, 300);
    s.placeImageXY(new RectangleImage(10, 10, OutlineMode.OUTLINE, Color.BLACK), 5, 5);
    s.placeImageXY(new RectangleImage(10, 10, OutlineMode.SOLID, Color.BLACK), 5, 5);
    s.placeImageXY(new RectangleImage(10, 10, OutlineMode.OUTLINE, Color.BLACK), 5, 15);
    s.placeImageXY(new RectangleImage(10, 10, OutlineMode.SOLID, Color.BLACK), 5, 15);
    s.placeImageXY(new RectangleImage(10, 10, OutlineMode.OUTLINE, Color.BLACK), 15, 5);
    s.placeImageXY(new RectangleImage(10, 10, OutlineMode.SOLID, Color.BLACK), 15, 5);
    s.placeImageXY(new RectangleImage(10, 10, OutlineMode.OUTLINE, Color.BLACK), 15, 15);
    s.placeImageXY(new RectangleImage(10, 10, OutlineMode.SOLID, Color.BLACK), 15, 15);

    t.checkExpect(this.ms.gameOver(), s);

  }

  void testGameWin(Tester t) {
    this.initData();
    this.gb.createCells();
    this.gb.cells.get(0).get(0).isMine = true;
    this.ms.gameBoard = this.gb;

    WorldScene s = this.gb.drawAllCells(300, 300, this.ms.getEmptyScene());
    s.placeImageXY(new TextImage("YOU WIN!", Color.GREEN), 300, 300);
    s.placeImageXY(new RectangleImage(10, 10, OutlineMode.OUTLINE, Color.BLACK), 5, 5);
    s.placeImageXY(new RectangleImage(10, 10, OutlineMode.SOLID, Color.BLACK), 5, 5);
    s.placeImageXY(new RectangleImage(10, 10, OutlineMode.OUTLINE, Color.BLACK), 5, 15);
    s.placeImageXY(new RectangleImage(10, 10, OutlineMode.SOLID, Color.BLACK), 5, 15);
    s.placeImageXY(new RectangleImage(10, 10, OutlineMode.OUTLINE, Color.BLACK), 15, 5);
    s.placeImageXY(new RectangleImage(10, 10, OutlineMode.SOLID, Color.BLACK), 15, 5);
    s.placeImageXY(new RectangleImage(10, 10, OutlineMode.OUTLINE, Color.BLACK), 15, 15);
    s.placeImageXY(new RectangleImage(10, 10, OutlineMode.SOLID, Color.BLACK), 15, 15);

    t.checkExpect(this.ms.gameOver(), s);

  }

  void testWorldEnds(Tester t) {
    this.initData();
    this.ms = new Minesweeper(0, 2, 2);

    t.checkExpect(this.ms.worldEnds(), new WorldEnd(false, this.ms.makeScene()));

    this.ms.isMineClicked = true;

    t.checkExpect(this.ms.worldEnds(), new WorldEnd(true, this.ms.gameOver()));

    this.ms.gameBoard.cells.get(0).get(0).isClickedNow();
    this.ms.gameBoard.cells.get(1).get(0).isClickedNow();   
    this.ms.gameBoard.cells.get(0).get(1).isClickedNow();
    this.ms.gameBoard.cells.get(1).get(1).isClickedNow();

    t.checkExpect(this.ms.worldEnds(), new WorldEnd(true, this.ms.gameWin()));  

  }

}





